-- ***************************************************************************
-- Copyright (c) 2013 SAP AG or an SAP affiliate company. All rights reserved.
-- ***************************************************************************
// This sample code is provided AS IS, without warranty or liability of any kind.
// 
// You may use, reproduce, modify and distribute this sample code without
// limitation,  on the condition that you retain the foregoing copyright
// notice and disclaimer as to the original code.  
// 
// *******************************************************************

-- json_sample
--	Demonstrate the use of a SQL Anywhere JSON service.
--
-- Usage: browse to http://localhost/getinfo
--
-- This application demonstrates how a fictitious employee address book 
-- may be generated by a web application using JSON.  A single textfield 
-- is used for entry of an employee name.  Each keystroke entered
-- generates a javascript event which invokes ajax_getinfo() to execute
-- a text completion function.  ajax_getinfo() reads the textfield data
-- and uses AJAX (Asynchronous Javascript and XML) to make an HTTP request.
-- The JSON (Javascript Object Notation) response from the SQL Anywhere
-- JSON service is parsed and its data elements are used to generate
-- an HTML table.

-- Note: if you started the SQL Anywhere web server with an HTTP port other
-- than 80, you will have to change the port number in the localhost URL 
-- below.

-- See http://www.json.org/fatfree.html for more information about JSON.

-- The getinfo service called by the user
call sa_make_object( 'service', 'getinfo' );
alter service getinfo
	type 'raw'
	authorization off
	secure off
	user dba
	as call sp_getinfo();

-- The json_getinfo service called by Javascript AJAX
call sa_make_object( 'service', 'json_getinfo' );
alter service json_getinfo
	type 'json'
	authorization off
	secure off
	user dba
	as call sp_json_getinfo( :name );

-- Procedure called by 'json_getinfo' service
create or replace procedure sp_json_getinfo( ab_name long varchar )
result( name varchar(128),
	empno int,
	scale float,
	salaried bit,
	address varchar(128) )
BEGIN
--    call sa_set_http_header( 'Content-Type', 'application/json' );
    if ab_name is not null and ab_name != '' then
	select * from json_address_book where name like ab_name || '%' order by name;
    end if;
END;

-- Procedure called by 'getinfo' service
create or replace procedure sp_getinfo()
BEGIN
	declare res long varchar;
	declare javascript long varchar;

	set javascript = '
<script language="javascript">
function ajax_getinfo()
{
    var xmlHttp;
    try {    // Firefox, Opera 8.0+, Safari
	xmlHttp=new XMLHttpRequest();
    } catch (e) {    // Internet Explorer
	try {
	    xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");
	} catch (e) {
	    try {
		xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
	    } catch (e) {
		alert("Your browser does not support AJAX!");
		return false;
	    }
	}
    }
    xmlHttp.onreadystatechange=function()
    {
	if( xmlHttp.readyState == 4 ) {
	    var div = document.getElementById("hiddenDiv");
	    if( xmlHttp.responseText != '''' ) {
		var data = eval( xmlHttp.responseText );
    
		if( data.length == 0 ) {
		    div.style.visibility = "hidden";
		    return;
		}
    
		var template = "<tr>" +
				"<td>{name}</td>" +
				"<td>{empno}</td>" +
				"<td>{scale}</td>" +
				"<td>{salaried}</td>" +
				"<td>{address}</td></tr>"
    
		var table = ''<table border="1">'' +
				"<tr><th>Name</th><th>Emp#</th><th>Scale</th>" + 
				"<th>Salaried</th><th>Address</th></tr>"
    
		for( i = 0; i < data.length; i++ ) {
		    table += template.supplant( data[i] );
		}
    
		table += "</table>";
    
		div.innerHTML = table;
		div.style.visibility = "visible";
	    } else {
		div.style.visibility = "hidden";
	    }
	}
    }
    var idvalue = document.getElementById("nameid").value;
    var rand = parseInt(Math.random()*99999999);
    var url = "json_getinfo?name="

    xmlHttp.open( "GET", url + escape(idvalue) + "&rand=" + rand, true );
    xmlHttp.send( null );
}

String.prototype.supplant = function (o)
{
    return this.replace(/{([^{}]*)}/g,
	    function (a, b) {
	        return o[b];
	    }
    );
};
</script>
';
    call sa_set_http_header( 'Content-Type', 'text/html' );

    set res =  '<HTML>\n<HEAD>\n'
		|| javascript
		|| '</HEAD>\n<BODY>\n'
		|| '<H1>Demonstration of an Employee Address book</H1>'
		|| '<H3>Begin by entering ''S'' within the textfield</H3>'
		|| '</ BR>'
		|| 'Employee Name:<input id="nameid" type="text"'
		|| ' autocomplete="off" onkeyup="ajax_getinfo();"'
		|| ' name="Name" />\n'
		|| '<div id="hiddenDiv" style="position:relative;"></div>\n'
		|| '</BODY>\n</HTML>\n';

    select res;
END;
go

DROP TABLE IF EXISTS DBA.json_address_book;

CREATE TABLE json_address_book
(
    "name"	    long varchar not null,
    "empno"	    integer not null default autoincrement,
    "scale"	    float null,
    "salaried"	    bit null,
    "address"	    long varchar null,
);
commit work;

INSERT INTO DBA.json_address_book ("name", "scale", "salaried", "address")
VALUES(
    'Solomon, John',
    3.1415,
    0,
    '111 Pulsar Boulevard, Milky Way' );
    
INSERT INTO DBA.json_address_book ("name", "scale", "salaried", "address")
VALUES(
    'Slate, John',
    3.33,
    1,
    '333 Starry Lane, Milky Way' );
    
-- salaried and address are intentionally null
INSERT INTO DBA.json_address_book ("name", "scale")
VALUES(
    'Smithers, John',
    2.75 );
    
INSERT INTO DBA.json_address_book ("name", "scale", "salaried", "address")
VALUES(
    'Small, John',
    5.778,
    0,
    '123 Galaxy Drive, Milky Way' );
    
INSERT INTO DBA.json_address_book ("name", "scale", "salaried", "address")
VALUES(
    'Smitty, John',
    2,
    1,
    '111 Pulsar Boulevard, Milky Way' );
    
