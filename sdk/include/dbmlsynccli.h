// ***************************************************************************
// Copyright (c) 2013 SAP AG or an SAP affiliate company. All rights reserved.
// ***************************************************************************
/// @file dbmlsynccli.h
//
// All rights reserved. All unpublished rights reserved.
// *****************************************************
#ifndef DBMLSYNCCLI_H_INCLUDED_16
/// @internal
#define DBMLSYNCCLI_H_INCLUDED_16 1

#include "pshpk4.h"
#include "dllapi.h"

#ifndef DOXYGEN_IGNORE
namespace DbmlsyncClient16 {
#endif

const int DBSC_MAX_PROPERTY_LEN	= 512;
const int DBSC_INFINITY		= 0xFFFFFFFF;
const int NULL_SYNCHDL		= 0;

typedef unsigned DBSC_SyncHdl;

/** Indicates the result of an attempt to retrieve an event.
 *
 * @see DbmlsyncClient::GetEvent
 */
typedef enum {
    ///  Indicates that an event was successfully retrieved.
    DBSC_GETEVENT_OK		= 1,
    /// Indicates that the timeout expired without any event being available to
    /// return.
    DBSC_GETEVENT_TIMED_OUT	= 2,
    /// Indicates that no event was returned because of an error condition.
    DBSC_GETEVENT_FAILED	= 3
} DBSC_GetEventRet;

/** Indicates how urgently the server should be shut down.
 *
 * @see DbmlsyncClient::ShutdownServer
 */
typedef enum {
    /// Indicates that the server should complete any outstanding
    /// synchronization requests and then shutdown. Once the server receives the
    /// shutdown request, it does not accept any more synchronization requests.
    DBSC_SHUTDOWN_ON_EMPTY_QUEUE = 1,
    /// Indicates that the server should shutdown cleanly, as quickly as
    /// possible.  If there are outstanding synchronization requests, they are
    /// not performed and if there is a running synchronization it may be
    /// interrupted.
    DBSC_SHUTDOWN_CLEANLY	 = 2
} DBSC_ShutdownType;

/** Indicates the action taken during a dbmlsync server startup attempt.
 *
 * @see DbmlsyncClient::StartServer
 */
typedef enum {
    /// Indicates that a new dbmlsync server was started. 
    DBSC_SS_STARTED		 = 1,
    /// Indicates that an existing dbmlsync server was found, so no new server
    /// was started.
    DBSC_SS_ALREADY_RUNNING	 = 2
} DBSC_StartType;

/** Indicates the result of a synchronization cancellation attempt.
 *
 * @see DbmlsyncClient::CancelSync
 */
typedef enum
{
    /// Canceled a synchronization that was in the wait queue.
    DBSC_CANCEL_OK_QUEUED        = 1,
    /// Canceled an active synchronization.
    DBSC_CANCEL_OK_ACTIVE        = 2,
    /// Failed to cancel the synchronization. 
    DBSC_CANCEL_FAILED           = 3
} DBSC_CancelRet;

/** Indicates the type of event generated by a synchronization.
 *
 * @see DBSC_Event
 * @see DbmlsyncClient::GetEvent
 */
typedef enum {
    /// An error was generated by the synchronization; str1 points to the text
    /// of the error.
    DBSC_EVENTTYPE_ERROR_MSG	= 1,
    /// A warning was generated by the synchronization; str1 points to the text
    /// of the warning. 
    DBSC_EVENTTYPE_WARNING_MSG	= 2,
    /// An information message was generated by the synchronization; str1 points
    /// to the text of the message.
    DBSC_EVENTTYPE_INFO_MSG	= 3,
    /// Provides information for updating a progress bar; val1 contains the new
    /// progress value.  This value can range from 0 to 1000, where 0 
    /// indicates 0% done and 1000 indicates 100% done.
    DBSC_EVENTTYPE_PROGRESS_INDEX= 4,
    /// The text associated with the progress bar has been updated; the new
    /// value is pointed to by str1.
    DBSC_EVENTTYPE_PROGRESS_TEXT= 6,
    /// The title for the synchronization window/control has changed; the new
    /// title is pointed to by str1. 
    DBSC_EVENTTYPE_TITLE	= 7,
    /// The synchronization has begun; there is no additional information
    /// associated with this event. 
    DBSC_EVENTTYPE_SYNC_START	= 8,
    /// The synchronization is complete; val1 contains the exit code from the
    /// synchronization.  A 0 value indicates success. A non-zero value
    /// indicates that the synchronization failed.
    DBSC_EVENTTYPE_SYNC_DONE	= 9,
    /// A connection to the MobiLink Server was established; str1 
    /// indicates the communication protocol being used and str2 contains
    /// the network protocol options used.
    DBSC_EVENTTYPE_ML_CONNECT	= 10,
    /// The MobiLink server confirmed that it successfully committed the
    /// upload to the consolidated database.
    DBSC_EVENTTYPE_UPLOAD_COMMITTED   = 11,
    /// The download has been successfully committed in the remote database.
    /// val1 contains the number of insert/update operations committed.
    /// val2 contains the number of delete operations committed
    DBSC_EVENTTYPE_DOWNLOAD_COMMITTED = 12,
    /// The remote has begun to send an upload to the server.
    DBSC_EVENTTYPE_UPLOAD_START = 13,
    /// The remote has completed sending an upload segment to the server.
    /// For incremental and transactional uploads a separate event is
    /// generated each time an upload segment is sent.
    /// val1 contains the number of insert operations sent.
    /// val2 contains the number of update operations sent.
    /// val3 contains the number of delete operations sent.
    DBSC_EVENTTYPE_UPLOAD_SENT = 14,
    /// The remote has begun processing the download received from the server.
    DBSC_EVENTTYPE_DOWNLOAD_START = 15,
    /// @internal
    DBSC_EVENTTYPE_UNKNOWN	= 1000,
    /// @internal
    DBSC_EVENTTYPE_FIRST_INTERNAL = DBSC_EVENTTYPE_UNKNOWN,
    /// @internal
    DBSC_EVENTTYPE_INVALID	= 1001,
    /// @internal
    DBSC_EVENTTYPE_PING		= 1002,
    /// @internal
    DBSC_EVENTTYPE_HELLO	= 1003,
    /// @internal
    DBSC_EVENTTYPE_CANCEL	= 1004,
    /// @internal
    DBSC_EVENTTYPE_AUTH		= 1005,
    /// @internal
    DBSC_EVENTTYPE_SYNC_ACK	= 1006,
    /// @internal
    DBSC_EVENTTYPE_SHUTDOWN_ACK	= 1007,
    /// @internal
    DBSC_EVENTTYPE_SHUTTING_DOWN= 1008,
    /// @internal
    DBSC_EVENTTYPE_PID		= 1009,
    /// @internal
    DBSC_EVENTTYPE_CONNID	= 1010
} DBSC_EventType;

/** Indicates the reason for a method call failure.
 */
typedef enum {
    /// No error occurred.
    DBSC_ERR_OK				= 1,
    /// The class has not been initialized by calling the Init method.
    DBSC_ERR_NOT_INITIALIZED		= 2,
    /// The Init method was called on a class that was already initialized.
    DBSC_ERR_ALREADY_INITIALIZED	= 3,
    /// No connection to a dbmlsync server is in place.
    DBSC_ERR_NOT_CONNECTED		= 4,
    /// Cannot resolve host information.
    DBSC_ERR_CANT_RESOLVE_HOST		= 5,
    /// Connection to the dbmlsync server has failed.
    DBSC_ERR_CONNECT_FAILED		= 6,
    /// Error initializing TCP layer.
    DBSC_ERR_INITIALIZING_TCP_LAYER	= 7,
    /// Connect method failed because a connection was already in place.
    DBSC_ERR_ALREADY_CONNECTED		= 8,
    /// This is an internal error.
    DBSC_ERR_PROTOCOL_ERROR		= 9,
    /// The connection was rejected by the dbmlsync server.
    /// str1 points to a string returned by the server which may provide
    /// more information about why the connection attempt was rejected.
    DBSC_ERR_CONNECTION_REJECTED	= 10,
    /// The timeout expired while waiting for a response from the server.
    DBSC_ERR_TIMED_OUT			= 11,
    /// Could not Fini the class because it is still connected to the server.
    DBSC_ERR_STILL_CONNECTED		= 12,
    /// The server could not cancel the synchronization request, likely
    /// because the synchronization was already in progress.
    DBSC_ERR_SYNC_NOT_CANCELED		= 14,
    /// An invalid property value was passed to the SetProperty method.
    DBSC_ERR_INVALID_VALUE		= 15,
    /// The specified property name is not valid.
    DBSC_ERR_INVALID_PROP_NAME		= 16,
    /// The property value is too long; properties must be less
    /// than DBCS_MAX_PROPERTY_LEN bytes long.
    DBSC_ERR_VALUE_TOO_LONG		= 17,
    /// A server-side error occurred while canceling or adding a sync.
    /// str1 points to a string returned by the server which may provide
    /// more information about the error.
    DBSC_ERR_SERVER_SIDE_ERROR		= 18,
    /// Unable to start a new dbmlsync server.
    DBSC_ERR_CREATE_PROCESS_FAILED	= 20,
    /// TCP error occurred while reading data from the dbmlsync server.
    DBSC_ERR_READ_FAILED		= 21,
    /// TCP error occurred while sending data to the dbmlsync server.
    DBSC_ERR_WRITE_FAILED		= 22,
    /// Failed to receive a response from the server that is required to
    /// complete the requested action.
    DBSC_ERR_NO_SERVER_RESPONSE		= 23,
    /// The UID or PWD specified is too long.
    DBSC_ERR_UID_OR_PWD_TOO_LONG	= 24,
    /// The UID or PWD specified is not valid or lacks sufficient privileges to connect.
    DBSC_ERR_UID_OR_PWD_NOT_VALID	= 25,	// TODO: Indicate which parm was invalid
    /// One of the parameters passed to the function was not valid.
    DBSC_ERR_INVALID_PARAMETER		= 26,
    /// An error occurred while waiting for the server to shutdown.
    DBSC_ERR_WAIT_FAILED		= 27,
    /// WaitForServerShutdown method was called without first calling the
    /// ShutdownServer method.
    DBSC_ERR_SHUTDOWN_NOT_CALLED	= 28,
    /// A synchronization request was sent to the server but no
    /// acknowledgement was received; There is no way to know if the
    /// server received the request. 
    /// hdl1 is the handle for the sync request that was sent. If the
    /// server received the request, this handle can be used to identify
    /// events for the synchronization retrieved using the GetEvent method.
    DBSC_ERR_NO_SYNC_ACK		= 29,
    /// The server could not cancel the synchronization request because
    /// the synchronization was active.
    DBSC_ERR_ACTIVE_SYNC_NOT_CANCELED	= 30,
    /// The dbmlsync server has encountered an error while starting up.
    /// The server is now shutting down.
    /// Use the dbmlsync -o option to log the error message to a file. 
    DBSC_ERR_DEAD_SERVER		= 31
} DBSC_ErrorType;

/** Contains information about an event generated by a synchronization.
 * @struct DBSC_Event
 *
 * @see DBSC_EventType
 */
typedef struct {
    /// Indicates the synchronization that generated the event.  This value
    /// matches the value returned by the Sync method.
    DBSC_SyncHdl	hdl;
    /// Indicates the type of event being reported.
    DBSC_EventType	type;
    // the following are generic data holders.  The fields that are filled
    // in depend on the value of the 'type' field. See the definition
    // of the DBSC_EventType enum for more info
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    const char 		*str1;
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    const char		*str2;
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    long int		val1;
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    long int		val2;
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    long int		val3;
    /// Contains additional information about the event.  The meaning of this
    /// information depends on the value of the type variable.
    void		*data;
} DBSC_Event;

/** Contains information about the failure of a previous method call.
 * @struct DBSC_ErrorInfo
 * 
 * str1, str2, val1, val2 and hdl1 contain additional information about
 * the failure, and their meanings depend on the error type. The following
 * error types use fields in this structure to store additional information:
 * <P>
 * <UL>
 * <LI>DBSC_ERR_CONNECTION_REJECTED</LI>
 * <LI>DBSC_ERR_SERVER_SIDE_ERROR</LI>
 * <LI>DBSC_ERR_NO_SYNC_ACK</LI>
 * </UL>
 *
 * @see DBSC_ErrorType
 */
typedef struct {
    /// Contains a value that indicates the reason for failure.
    /// Supported values are listed in the DBSC_ErrorType enumeration.
    DBSC_ErrorType	type;
    /// Contains additional information about the failure.  The meaning of this
    /// information depends on the value of the type variable.
    const char		*str1;
    /// Contains additional information about the failure.  The meaning of this
    /// information depends on the value of the type variable.
    const char		*str2;
    /// Contains additional information about the failure.  The meaning of this
    /// information depends on the value of the type variable.
    long int		val1;
    /// Contains additional information about the failure.  The meaning of this
    /// information depends on the value of the type variable.
    long int		val2;
    /// Contains additional information about the failure.  The meaning of this
    /// information depends on the value of the type variable.
    DBSC_SyncHdl	hdl1;
} DBSC_ErrorInfo;


//
// The following "C" prototypes are for internal use only
//
typedef void *DbmlsyncClientInstance;
/// @internal
extern _crtn DbmlsyncClientInstance _entry DBSC_CreateInstance_16( void );
/// @internal
extern _crtn void _entry DBSC_DeleteInstance_16( DbmlsyncClientInstance inst );
/// @internal
extern _crtn bool _entry DBSC_Init_16( DbmlsyncClientInstance inst );
/// @internal
extern _crtn bool _entry DBSC_Fini_16( DbmlsyncClientInstance inst );
/// @internal
extern _crtn bool _entry DBSC_Connect_16( DbmlsyncClientInstance inst,
				       const char *host, unsigned port,
				       const char *uid, const char *pwd );
/// @internal
extern _crtn bool _entry DBSC_Disconnect_16( DbmlsyncClientInstance inst );
/// @internal
extern _crtn bool _entry DBSC_Ping_16( DbmlsyncClientInstance inst,
					    unsigned timeout );
/// @internal
extern _crtn bool _entry DBSC_WaitForServerShutdown_16(
			DbmlsyncClientInstance inst, unsigned timeout );
/// @internal
extern _crtn DBSC_SyncHdl _entry DBSC_Sync_16( DbmlsyncClientInstance inst,
					    const char *name,
					    const char *extra_opts );
/// @internal
extern _crtn bool _entry DBSC_StartServer_16( DbmlsyncClientInstance inst,
			                   unsigned port,
					   const char *cmdline,
					   unsigned timeout,
                                           DBSC_StartType *starttype );
/// @internal
extern _crtn bool _entry DBSC_ShutdownServer_16( DbmlsyncClientInstance inst,
                                              DBSC_ShutdownType how );
/// @internal
extern _crtn bool _entry DBSC_CancelSyncOld_16( DbmlsyncClientInstance inst,
					  DBSC_SyncHdl hdl );
/// @internal
extern _crtn DBSC_CancelRet _entry DBSC_CancelSync_16(
                           DbmlsyncClientInstance inst,
                           DBSC_SyncHdl hdl,
			   bool cancel_active );
/// @internal
extern _crtn DBSC_GetEventRet _entry DBSC_GetEvent_16(
			   DbmlsyncClientInstance inst,
                           DBSC_Event **event, unsigned timeout );
/// @internal
extern _crtn bool _entry DBSC_FreeEventInfo_16( DbmlsyncClientInstance inst,
					     DBSC_Event *event );
/// @internal
extern _crtn const DBSC_ErrorInfo * _entry DBSC_GetErrorInfo_16(
                                     DbmlsyncClientInstance inst );
/// @internal
extern _crtn bool _entry DBSC_SetProperty_16( DbmlsyncClientInstance inst,
				    const char *name, const char *value );
/// @internal
extern _crtn bool _entry DBSC_GetProperty_16( DbmlsyncClientInstance inst,
					   const char *name, char *value );

/** Communicates using TCP/IP with a separate process, dbmlsync server, which
 * performs a synchronization by connecting to the MobiLink server and the
 * remote database.
 *
 * Multiple clients can share the same dbmlsync server. However, each dbmlsync
 * server can only synchronize a single remote database.  Each remote database
 * can have only one dbmlsync server synchronizing it.
 *
 * The dbmlsync server performs one synchronization at a time. If the server
 * receives a synchronization request while performing a synchronization, it
 * queues that request and satisfies it later. 
 *
 * Status information generated by synchronizations is communicated back to the
 * client application through the GetEvent method. 
 *
 * @see DbmlsyncClient::GetEvent
 */
class DbmlsyncClient {
public:

    /** Creates an instance of the dbmlsync client class that can be used to
     * control synchronizations.
     * 
     * The pointer returned by this method can be used to call the remaining
     * methods in the class. You can destroy the instance by calling the 
     * standard delete operator on the pointer.
     * 
     * @return A pointer to the new instance that has been created.
     * Returns null when an error occurs.
     */
    static DbmlsyncClient *InstantiateClient( void ) {
	DbmlsyncClientInstance	inst;
	DbmlsyncClient		*ret;

	inst = DBSC_CreateInstance_16();
	if( inst == NULL ) {
	    ret = NULL;
	} else {
	    ret = new DbmlsyncClient( inst );
	}
	return( ret );
    }

	/// @internal
    virtual ~DbmlsyncClient() {
	DBSC_DeleteInstance_16( _inst );
    }

    /** Initializes a DbmlsyncClient class instance.
     * 
     * This method must be called after instantiating the DbmlSyncClient
     * class instance.  Other DbmlSyncClient methods cannot be called until
     * you have successfully initialized the instance.
     * 
     * @return True when the class instance is successfully initialized;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::InstantiateClient
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool Init( void ) {
	return( DBSC_Init_16( _inst ) );
    }

    /** Frees all resources used by this class instance.
     * 
     * This method must be called before you can delete the DbmlSyncClient
     * class instance. 
     * 
     * <em>Note:</em> You should use the Disconnect method to disconnect
     *  from any connected servers before finalizing the class instance.
     * 
     * @return True when the class instance is successfully finalized;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::Disconnect
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool Fini( void ) {
	return( DBSC_Fini_16( _inst ) );
    }

    /** Opens a connection to a dbmlsync server that is already running
     * on this computer.
     * 
     * Dbmlsync servers are started (either using the command line or the
     * StartServer method) using a connection string that provided a database
     * userid and password (for example, <i>server_userid</i>). In addition, the
     * Connect method of the Dbmlsync API requires a valid database userid
     * (for example, <i>client_userid</i>).
     *
     * <i>Client_userid</i> is used only to validate whether this client has sufficient
     * permissions to synchronize the database. When synchronizations are
     * performed <i>server_userid</i> is used.
     *
     * In SQL Anywhere 12 and earlier, both <i>client_userid</i> and
     * <i>server_userid</i> required DBA or REMOTE DBA permissions.
     *
     * In SQL Anywhere 16 and later, <i>server_userid</i> must have sufficient
     * privileges to synchronize. At a minimum, <i>server_userid</i> must have
     * the SYS_RUN_REPLICATION_ROLE system role but other privileges may be
     * required to allow synchronization. <i>Client_userid</i> must either:
     * <ul>
     * <li>Be the same as <i>server_userid</i>, or </li>
     * <li>Have the SYS_AUTH_DBA_ROLE system role, or </li>
     * <li>Have a user-extended role based on <i>server_userid</i>, for example:<br />
     *		CREATE ROLE FOR USER server_userid;<br />
     *		GRANT server_userid to client_userid; </li>
     * </ul>
     * While the last option ensures that <i>client_userid</i> has at least as many
     * system privileges as <i>server_userid</i>, it is also possible for <i>server_userid</i>
     * to have object-level privileges not granted to its role and therefore
     * <i>client_userid</i> would not have those privileges. If those privileges are used
     * during synchronization, then <i>client_userid</i> has effectively increased its privileges
     * in order to perform the synchronization.  If this is not acceptable, ensure that all of
     * <i>server_userids</i> object-level privileges are granted to its user-extended role.
     *
     * @param	host	This value is reserved.  Use NULL.
     * @param	port	The TCP port on which the dbmlsync server is listening.
     *       			Use the same port value that you specified with the
     *       			StartServer method.
     * @param	uid		A valid database user id with DBA or REMOTE DBA
     *       			authority on the remote database that is to be
     *       			synchronized.
     * @param	pwd		The database password for the user specified by uid.
     * 
     * @return True when a connection to the server was established;
     * otherwise, returns false.  When false is returned, you can call
     * the GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::StartServer
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool Connect( const char *host, unsigned port,
    		  const char *uid, const char *pwd ) {
	return( DBSC_Connect_16( _inst, host, port, uid, pwd ) );
    }

    /** Breaks the dbmlsync server connection that was established with
     * the Connect method.
     * 
     * You should always call Disconnect when you are finished with a
     * connection.
     * 
     * @return True when the connection to the server has been broken;
     * otherwise, returns false.  When false is returned, you can call
     * the GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::Connect
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool Disconnect( void ) {
	return( DBSC_Disconnect_16( _inst ) );
    }

    /** Sends a ping request to the dbmlsync server to check if the
     * server is active and responding to requests.
     *
     * You must be connected to the server before calling this method.
     * 
     * @param	timeout	The maximum number of milliseconds to wait for
     *       			the server to respond to the ping request. Use 
     *       			DBSC_INFINITY to wait indefinitely for a 
     *       			response.
     * 
     * @return True when a response to the ping request was received
     * from the server; otherwise, returns false.  When false is returned,
     * you can call the GetErrorInfo method for more information about the
     * failure.
     *
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool Ping( unsigned timeout ) {
	return( DBSC_Ping_16( _inst, timeout ) );
    }

    /** Requests that the dbmlsync server perform a synchronization.
     * 
     * You must be connected to the server before calling this method.
     * At least one of profile_name and extra_opts must be non-null.
     *
     * The return value identifies the synchronization request and can
     * be used to cancel the request or to process events returned by
     * the synchronization
     * 
     * @param	profile_name	The name of a synchronization profile defined 
     *       			in the remote database that contains the options 
     *       			for the synchronization. If profile_name is null 
     *       			then no profile is used and the extra_opts 
     *       			parameter should contain all the options for the
     *       			synchronization. 
     * @param	extra_opts	A string formed according to the same rules 
     *       				used to define an option string for a
     *       				synchronization profile, which is a string specified
     *                      as a semicolon delimited list of elements of the
     *                      form <option name>=<option value>. If profile_name
     *                      is non-null then the options specified by extra_opts
     *       				are added to those already in the synchronization
     *       				profile specified by profile_name.  If an option
     *       				in the string already exists in the profile,
     *       				then the value from the string replaces the 
     *       				value already stored in the profile. If 
     *       				profile_name is null then extra_opts should specify
     *       				all the options for the synchronization. See 
     *                      \salink{CREATE SYNCHRONIZATION PROFILE statement [MobiLink], "http://dcx.sybase.com/goto?page=sa160/en/dbreference/create-synchronization-profile-statement.html", "sqlref", "create-synchronization-profile-statement"}.
     * 
     * @return A DBSC_SyncHdl value which uniquely identifies this
     * synchronization request and is only valid until the client disconnects
     * from the server.  Returns NULL_SYNCHDL if an error prevents the
     * synchronization request from being created. When NULL_SYNCHDL is
     * returned, you can call the GetErrorInfo method for more information about
     * the failure.
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual DBSC_SyncHdl Sync( const char *profile_name, const char *extra_opts ) {
	return( DBSC_Sync_16( _inst, profile_name, extra_opts ) );
    }

    /** Starts a new dbmlsync server if one is not already listening on the 
     * specified port.
     * 
     * If a server is present, this method sets the starttype parameter to
     * DBSC_SS_ALREADY_RUNNING and returns without further action. If no 
     * server is found, the method starts a new server using the options 
     * specified by the cmdline argument and waits for it to start accepting
     * requests before returning.
     *
     * On Windows Mobile devices, it is usually necessary to set the <b>server 
     * path</b> property before StartServer can be successfully called. The
     * <b>server path</b> property does not need to be set in the following
     * instances:
     *
     * <ul>
     * <li>Your application is in the same directory as
     * <code>dbmlsync.exe</code>.</li>
     * <li><code>dbmlsync.exe</code> is in the Windows directory.</li>
     * </ul>
     *
     * @param	port	The TCP port to check for an existing dbmlsync server.
     *       			If a new server is started, it is set to listen on this
     *       			port. 
     * @param	cmdline	A valid command line for starting a dbmlsync server. The 
     *       			command line may contain only the following options 
     *       			which have the same meaning that they do for the
     *       			dbmlsync utility: -a, -c, -dl, -do, -ek, -ep, -k, -l,
     *       			-o, -os, -ot, -p, -pc+, -pc-, -pd, -pp, -q, -qi, -qc,
     *       			-sc, -sp, -uc, -ud, -ui, -um, -un, -ux, -v[cnoprsut],
     *       			-wc, -wh.  The -c option must be specified.
     * @param	timeout	The maximum time in milliseconds to wait after a
     *       			dbmlsync server is started for it to be ready to accept
     *       			requests. 
     *       			Use DBSC_INFINITY to wait indefinitely for a response.
     * @param	starttype	An out parameter set to indicate if the server has
     *       				been located or started.  If starttype is non-null
     *       				on entry and StartServer returns true, then, on
     *       				exit, the variable pointed to by starttype is set to
     *       				a value from the DBSC_StartType enumeration.
     * 
     * @return True when the server was already running or successfully
     * started; otherwise, returns false.  When false is returned,
     * you can call the GetErrorInfo method for more information about the
     * failure.
     *
     * @see DbmlsyncClient::GetErrorInfo 
     */
    virtual bool StartServer( unsigned port, const char *cmdline,
			      unsigned timeout, DBSC_StartType *starttype ) {
	return( DBSC_StartServer_16( _inst, port, cmdline,
	                          timeout, starttype ) );
    }

    /** Shuts down the dbmlsync server to which the client is connected.
     * 
     * The Shutdown method returns immediately but there may be some delay
     * before the server actually shuts down.
     *
     * The WaitForServerShutdown method can be used to wait until the server
     * actually shuts down.
     * 
     * <em>Note:</em> You should still use the Disconnect method after calling
     *  ShutdownServer.
     * 
     * @param	how	Indicates the urgency of the server shutdown. Supported
     *       		values are listed in the DBSC_ShutdownType enumeration.
     * 
     * @return True when a shutdown request was successfully sent to the server;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DBSC_ShutdownType
     * @see DbmlsyncClient::Disconnect
     * @see DbmlsyncClient::WaitForServerShutdown
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual bool ShutdownServer( DBSC_ShutdownType how )
    {
	return( DBSC_ShutdownServer_16( _inst, how ) );
    }

    /** Returns when the server has shutdown or when the timeout expires,
     * whichever comes first.
     *
     * WaitForServerShutdown can only be called after the ShutdownServer
     * method is called.
     * 
     * @param	timeout	Indicates the maximum time in milliseconds to wait 
     *       			for the server to shutdown. Use DBSC_INFINITY to wait
     *       			indefinitely for a response.
     * 
     * @return True when the method returned due to the server shutdown;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual bool WaitForServerShutdown( unsigned timeout )
    {
	return( DBSC_WaitForServerShutdown_16( _inst, timeout ) );
    }

    /** Allows a client to cancel a synchronization request previously made
     * using the Sync method.
     *
     * Only synchronization requests waiting to be serviced can be canceled.
     * To stop a synchronization that has already begun, use the
     * CancelSync(UInt32, Boolean) method.
     *
     * A connection must be established to the server before this method
     * can be used. This method cannot be used if the client has disconnected
     * from the server since the Sync method was called. 
     *
     * @param	hdl	The synchronization handle returned by the Sync
     *       		method when the synchronization was requested.
     * 
     * @return True when the synchronization request was successfully canceled;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::GetErrorInfo
     * @see DbmlsyncClient::CancelSync(DBSC_SyncHdl, bool)
     * @see DbmlsyncClient::ShutdownServer
     * 
     * @overloadbrief Cancels a synchronization request.
     * @titlesuffix (deprecated)
     */
    virtual bool CancelSync( DBSC_SyncHdl hdl ) {
	return( DBSC_CancelSyncOld_16( _inst, hdl ) );
    }

    /** Allows a client to cancel a synchronization request previously made
     * using the Sync method. 
     *
     * A connection must be established to the server before this method
     * can be used. This method cannot be used if the client has disconnected
     * from the server since the Sync method was called. 
     *
     * @param	hdl	The synchronization handle returned by the Sync
     *       		method when the synchronization was requested.
     * @param	cancel_active	When set to true, the request is canceled even
     *                          if the synchronization has already begun.  When
     *                          set to false, the request is only canceled if
     *                          synchronization has not begun.
     * 
     * @return A value from the DBSC_CancelRet enumeration.
     * When DBSC_CANCEL_FAILED is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DBSC_CancelRet
     * @see DbmlsyncClient::GetErrorInfo
     * @see DbmlsyncClient::ShutdownServer
     */
    virtual DBSC_CancelRet CancelSync( DBSC_SyncHdl hdl,
                                       bool cancel_active ) {
	return( DBSC_CancelSync_16( _inst, hdl, cancel_active ) );
    }

    /** Retrieves the next feedback event for synchronizations requested by
     * the client.
     *
     * Feedback events contain information such as messages generated
     * from the sync, data for updating a progress bar, and synchronization
     * cycle notifications.
     *
     * As the dbmlsync server runs a synchronization it generates a series 
     * of events that contain information about the progress of the 
     * synchronization. These events are sent from the server to the 
     * DbmlsyncClient class, which queues them. When the GetEvent method is
     * called, the next event in the queue is returned if there is one
     * waiting.
     *
     * If there are no events waiting in the queue, this method waits
     * until an event is available or until the specified timeout has
     * expired before returning. 
     *
     * The types of events that are generated for a synchronization can
     * be controlled using properties.
     *
     * @param	event	If the return value is DBSC_GETEVENT_OK then the 
     *       			event parameter is filled in with a pointer to a
     *       			DBSC_Event structure containing information about
     *       			the event that has been retrieved. When you are
     *       			finished with the event structure you must call
     *       			the FreeEventInfo method to free memory associated
     *       			with it.
     * @param	timeout	Indicates the maximum time in milliseconds to wait 
     *       			if no event is immediately available to return. Use
     *       			DBSC_INFINITY to wait indefinitely for a response.
     * 
     * @return A value from the DBSC_GetEventRet enumeration.
     * When DBSC_GETEVENT_FAILED is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DBSC_GetEventRet
     * @see DBSC_Event
     * @see DbmlsyncClient::FreeEventInfo
     * @see DbmlsyncClient::SetProperty
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual DBSC_GetEventRet GetEvent( DBSC_Event **event,
                                       unsigned timeout ) {
	return( DBSC_GetEvent_16( _inst, event, timeout ) );
    }

    /** Frees memory associated with a DBSC_Event structure returned by
     * the GetEvent method.
     *
     * FreeEventInfo must be called on each DBSC_Event structure returned
     * by the GetEvent method.
     *
     * @param	event	A pointer to the DBSC_Event structure to be freed. 
     * 
     * @return True when the memory was successfully freed;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DBSC_Event
     * @see DbmlsyncClient::GetEvent
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual bool FreeEventInfo( DBSC_Event *event ) {
	return( DBSC_FreeEventInfo_16( _inst, event ) );
    }

    /** Retrieves additional information about the failure after
     * a DbmlsyncClient class method returns a failed return code.
     *
     * @return A pointer to a DBSC_ErrorInfo structure that contains
     * information about the failure.  The contents of this structure
     * may be overwritten the next time any class method is called.
     *
     * @see DBSC_ErrorType
     * @see DBSC_ErrorInfo
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual const DBSC_ErrorInfo *GetErrorInfo( void ) {
	return( DBSC_GetErrorInfo_16( _inst ) );
    }

    /** Sets various properties to modify the behavior of the class instance.
     *
     * Changes to property values only affect synchronization requests 
     * made after the property value was changed.
     * 
     * The <b>server path</b> property can be set to specify the directory from
     * which the client should start dbmlsync.exe when the StartServer method is
     * called.  When this property is not set, dbmlsync.exe is found using the
     * PATH environment variable. If there are multiple versions of SQL Anywhere
     * installed on your computer, it is recommended that you specify the
     * location of dbmlsync.exe using the <b>server path</b> property because
     * the PATH environment variable may locate a dbmlsync executable from
     * another installed version of SQL Anywhere. For example,
     * <p>
     * <pre>
     * ret = cli->SetProperty("server path", "c:\\sa16\\bin32");
     * </pre>
     *
     * The properties control the types of events that are returned by the
     * GetEvent method. By disabling events that you do not require you may
     * be able to improve performance. An event type is enabled by setting
     * the corresponding property to "1" and disabled by setting the property
     * to "0". 
     *
     * The following is a table of available property names and the event
     * types that each name controls:
     * <p>
     * <table>
     * <tr>
     *  <th>Property name</th>
     *  <th>Event types controlled</th>
     *  <th>Default value</th>
     * </tr>
     * <tr>
     *  <td>enable errors</td>
     *  <td>DBSC_EVENTTYPE_ERROR_MSG</td>
     *  <td>1</td>
     * </tr>
     * <tr>
     *  <td>enable warnings</td>
     *  <td>DBSC_EVENTTYPE_WARNING_MSG</td>
     *  <td>1</td>
     * </tr>
     * <tr>
     *  <td>enable info msgs</td>
     *  <td>DBSC_EVENTTYPE_INFO_MSG</td>
     *  <td>1</td>
     * </tr>
     * <tr>
     *  <td>enable progress</td>
     *  <td>DBSC_EVENTTYPE_PROGRESS_INDEX</td>
     *  <td>0</td>
     * </tr>
     * <tr>
     *  <td>enable progress text</td>
     *  <td>DBSC_EVENTTYPE_PROGRESS_TEXT</td>
     *  <td>0</td>
     * </tr>
     * <tr>
     *  <td>enable title</td>
     *  <td>DBSC_EVENTTYPE_TITLE</td>
     *  <td>0</td>
     * </tr>
     * <tr>
     *  <td>enable sync start and done</td>
     *  <td>
     *    <p>DBSC_EVENTTYPE_SYNC_START</p>
     *    <p>DBSC_EVENTTYPE_SYNC_DONE</p>
     *  </td>
     *  <td>1</td>
     * </tr>
     * <tr>
     *  <td>enable status</td>
     *  <td>
     *    <p>DBSC_EVENTTYPE_ML_CONNECT</p>
     *    <p>DBSC_EVENTTYPE_UPLOAD_COMMITTED</p>
     *    <p>DBSC_EVENTTYPE_DOWNLOAD_COMMITTED</p>
     *  </td>
     *  <td>1</td>
     * </tr>
     * </table>
     * 
     * @param	name	The name of the property to set.  For a list of
     *                  valid property names, see table.
     * @param	value	The value to set for the property. The string
     *                  specified must contain less than
     *                  DBCS_MAX_PROPERTY_LEN bytes. 
     * 
     * @return True when the property was successfully set;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::StartServer
     * @see DbmlsyncClient::GetEvent
     * @see DbmlsyncClient::GetProperty
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual bool SetProperty( const char *name, const char *value ) {
	return( DBSC_SetProperty_16( _inst, name, value ) );
    }

    /** Retrieves the current value of a property.
     *
     * @param	name	The name of the property to retrieve.  For a list of
     *                  valid property names, see SetProperty.
     * @param	value	A buffer of at least DBSC_MAX_PROPERTY_LEN bytes
     *                  where the value of the property is stored.
     * 
     * @return True when the property was successfully received;
     * otherwise, returns false.  When false is returned, you can call the
     * GetErrorInfo method for more information about the failure.
     *
     * @see DbmlsyncClient::SetProperty
     * @see DbmlsyncClient::GetErrorInfo
     */
    virtual bool GetProperty( const char *name, char *value ) {
	return( DBSC_GetProperty_16( _inst, name, value ) );
    }
private:
    DbmlsyncClient( DbmlsyncClientInstance inst ) {
	_inst = inst;
    }

private:
    DbmlsyncClientInstance	_inst;
};

#ifndef DOXYGEN_IGNORE
}
#endif

#ifndef MULTIPLE_DBMLSYNC_API_VERSIONS
using namespace DbmlsyncClient16;
#endif

#include "poppk.h"
#endif
